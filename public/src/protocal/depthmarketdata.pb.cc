// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depthmarketdata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "depthmarketdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class depthmarketdataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<depthmarketdata>
     _instance;
} _depthmarketdata_default_instance_;
class clearsignalDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<clearsignal>
     _instance;
} _clearsignal_default_instance_;
class heartbeatDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<heartbeat>
     _instance;
} _heartbeat_default_instance_;
class protomessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<protomessage>
     _instance;
  const ::depthmarketdata* market_data_;
  const ::clearsignal* clear_signal_;
  const ::heartbeat* heart_beat_;
} _protomessage_default_instance_;

namespace protobuf_depthmarketdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, ei_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, securitycode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, securityname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, openprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, precloseprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, lastprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, highprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, lowprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, bidprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, askprice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, turnover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, bp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, bv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, sp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, sv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, updtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, turnoverrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, avpri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, sa_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, limitup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, limitdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, cirstock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, totstock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, cirval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, totval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, nav_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, ratio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, committee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, ped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, pes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, wp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, np_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, tradvol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, field1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, field2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, field3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, field4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, field5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(depthmarketdata, field6_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clearsignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clearsignal, tradingday_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clearsignal, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(heartbeat, update_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protomessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protomessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(protomessageDefaultTypeInternal, market_data_),
  offsetof(protomessageDefaultTypeInternal, clear_signal_),
  offsetof(protomessageDefaultTypeInternal, heart_beat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(protomessage, which_message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(depthmarketdata)},
  { 51, -1, sizeof(clearsignal)},
  { 58, -1, sizeof(heartbeat)},
  { 64, -1, sizeof(protomessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_depthmarketdata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_clearsignal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_heartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_protomessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "depthmarketdata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _depthmarketdata_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_depthmarketdata_default_instance_);_clearsignal_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_clearsignal_default_instance_);_heartbeat_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_heartbeat_default_instance_);_protomessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_protomessage_default_instance_);_protomessage_default_instance_.market_data_ = const_cast< ::depthmarketdata*>(
      ::depthmarketdata::internal_default_instance());
  _protomessage_default_instance_.clear_signal_ = const_cast< ::clearsignal*>(
      ::clearsignal::internal_default_instance());
  _protomessage_default_instance_.heart_beat_ = const_cast< ::heartbeat*>(
      ::heartbeat::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025depthmarketdata.proto\"\352\005\n\017depthmarketd"
      "ata\022\n\n\002Ei\030\001 \001(\003\022\024\n\014SecurityCode\030\002 \001(\t\022\024\n"
      "\014SecurityName\030\003 \001(\t\022\021\n\tOpenPrice\030\004 \001(\001\022\025"
      "\n\rPreClosePrice\030\005 \001(\001\022\021\n\tLastPrice\030\006 \001(\001"
      "\022\021\n\tHighPrice\030\007 \001(\001\022\020\n\010LowPrice\030\010 \001(\001\022\020\n"
      "\010BidPrice\030\t \001(\001\022\020\n\010AskPrice\030\n \001(\001\022\016\n\006Vol"
      "ume\030\013 \001(\r\022\020\n\010Turnover\030\014 \001(\001\022\n\n\002BP\030\r \003(\001\022"
      "\n\n\002BV\030\016 \003(\r\022\n\n\002SP\030\017 \003(\001\022\n\n\002SV\030\020 \003(\r\022\014\n\004D"
      "ate\030\021 \001(\t\022\014\n\004Time\030\022 \001(\t\022\016\n\006Status\030\023 \001(\t\022"
      "\017\n\007UpdTime\030\024 \001(\r\022\024\n\014TurnoverRate\030\025 \001(\001\022\r"
      "\n\005AvPri\030\026 \001(\001\022\n\n\002SA\030\027 \001(\001\022\017\n\007LimitUp\030\030 \001"
      "(\001\022\021\n\tLimitDown\030\031 \001(\001\022\020\n\010CirStock\030\032 \001(\001\022"
      "\020\n\010TotStock\030\033 \001(\001\022\016\n\006CirVal\030\034 \001(\001\022\016\n\006Tot"
      "Val\030\035 \001(\001\022\013\n\003NAV\030\036 \001(\001\022\r\n\005Ratio\030\037 \001(\001\022\021\n"
      "\tCommittee\030  \001(\001\022\013\n\003PED\030! \001(\001\022\013\n\003PES\030\" \001"
      "(\001\022\n\n\002WP\030# \001(\001\022\n\n\002NP\030$ \001(\001\022\t\n\001Z\030% \001(\001\022\t\n"
      "\001D\030& \001(\001\022\t\n\001P\030\' \001(\001\022\017\n\007TradVol\030( \001(\005\022\016\n\006"
      "field1\030) \001(\005\022\016\n\006field2\030* \001(\005\022\016\n\006field3\030+"
      " \001(\001\022\016\n\006field4\030, \001(\001\022\016\n\006field5\0307 \001(\t\022\016\n\006"
      "field6\0308 \001(\t\"6\n\013clearsignal\022\022\n\ntradingda"
      "y\030\001 \001(\t\022\023\n\013update_time\030\002 \001(\r\" \n\theartbea"
      "t\022\023\n\013update_time\030\001 \001(\r\"\220\001\n\014protomessage\022"
      "\'\n\013market_data\030\001 \001(\0132\020.depthmarketdataH\000"
      "\022$\n\014clear_signal\030\002 \001(\0132\014.clearsignalH\000\022 "
      "\n\nheart_beat\030\003 \001(\0132\n.heartbeatH\000B\017\n\rwhic"
      "h_messageb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1017);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "depthmarketdata.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_depthmarketdata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int depthmarketdata::kEiFieldNumber;
const int depthmarketdata::kSecurityCodeFieldNumber;
const int depthmarketdata::kSecurityNameFieldNumber;
const int depthmarketdata::kOpenPriceFieldNumber;
const int depthmarketdata::kPreClosePriceFieldNumber;
const int depthmarketdata::kLastPriceFieldNumber;
const int depthmarketdata::kHighPriceFieldNumber;
const int depthmarketdata::kLowPriceFieldNumber;
const int depthmarketdata::kBidPriceFieldNumber;
const int depthmarketdata::kAskPriceFieldNumber;
const int depthmarketdata::kVolumeFieldNumber;
const int depthmarketdata::kTurnoverFieldNumber;
const int depthmarketdata::kBPFieldNumber;
const int depthmarketdata::kBVFieldNumber;
const int depthmarketdata::kSPFieldNumber;
const int depthmarketdata::kSVFieldNumber;
const int depthmarketdata::kDateFieldNumber;
const int depthmarketdata::kTimeFieldNumber;
const int depthmarketdata::kStatusFieldNumber;
const int depthmarketdata::kUpdTimeFieldNumber;
const int depthmarketdata::kTurnoverRateFieldNumber;
const int depthmarketdata::kAvPriFieldNumber;
const int depthmarketdata::kSAFieldNumber;
const int depthmarketdata::kLimitUpFieldNumber;
const int depthmarketdata::kLimitDownFieldNumber;
const int depthmarketdata::kCirStockFieldNumber;
const int depthmarketdata::kTotStockFieldNumber;
const int depthmarketdata::kCirValFieldNumber;
const int depthmarketdata::kTotValFieldNumber;
const int depthmarketdata::kNAVFieldNumber;
const int depthmarketdata::kRatioFieldNumber;
const int depthmarketdata::kCommitteeFieldNumber;
const int depthmarketdata::kPEDFieldNumber;
const int depthmarketdata::kPESFieldNumber;
const int depthmarketdata::kWPFieldNumber;
const int depthmarketdata::kNPFieldNumber;
const int depthmarketdata::kZFieldNumber;
const int depthmarketdata::kDFieldNumber;
const int depthmarketdata::kPFieldNumber;
const int depthmarketdata::kTradVolFieldNumber;
const int depthmarketdata::kField1FieldNumber;
const int depthmarketdata::kField2FieldNumber;
const int depthmarketdata::kField3FieldNumber;
const int depthmarketdata::kField4FieldNumber;
const int depthmarketdata::kField5FieldNumber;
const int depthmarketdata::kField6FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

depthmarketdata::depthmarketdata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_depthmarketdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:depthmarketdata)
}
depthmarketdata::depthmarketdata(const depthmarketdata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bp_(from.bp_),
      bv_(from.bv_),
      sp_(from.sp_),
      sv_(from.sv_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  securitycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.securitycode().size() > 0) {
    securitycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitycode_);
  }
  securityname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.securityname().size() > 0) {
    securityname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securityname_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  field5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field5().size() > 0) {
    field5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field5_);
  }
  field6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field6().size() > 0) {
    field6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field6_);
  }
  ::memcpy(&ei_, &from.ei_,
    static_cast<size_t>(reinterpret_cast<char*>(&field2_) -
    reinterpret_cast<char*>(&ei_)) + sizeof(field2_));
  // @@protoc_insertion_point(copy_constructor:depthmarketdata)
}

void depthmarketdata::SharedCtor() {
  securitycode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securityname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ei_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field2_) -
      reinterpret_cast<char*>(&ei_)) + sizeof(field2_));
  _cached_size_ = 0;
}

depthmarketdata::~depthmarketdata() {
  // @@protoc_insertion_point(destructor:depthmarketdata)
  SharedDtor();
}

void depthmarketdata::SharedDtor() {
  securitycode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securityname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field6_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void depthmarketdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* depthmarketdata::descriptor() {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const depthmarketdata& depthmarketdata::default_instance() {
  protobuf_depthmarketdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

depthmarketdata* depthmarketdata::New(::google::protobuf::Arena* arena) const {
  depthmarketdata* n = new depthmarketdata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void depthmarketdata::Clear() {
// @@protoc_insertion_point(message_clear_start:depthmarketdata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bp_.Clear();
  bv_.Clear();
  sp_.Clear();
  sv_.Clear();
  securitycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  securityname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ei_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field2_) -
      reinterpret_cast<char*>(&ei_)) + sizeof(field2_));
  _internal_metadata_.Clear();
}

bool depthmarketdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:depthmarketdata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 Ei = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ei_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SecurityCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securitycode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->securitycode().data(), static_cast<int>(this->securitycode().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "depthmarketdata.SecurityCode"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SecurityName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_securityname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->securityname().data(), static_cast<int>(this->securityname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "depthmarketdata.SecurityName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double OpenPrice = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PreClosePrice = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precloseprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LastPrice = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double HighPrice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LowPrice = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double BidPrice = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AskPrice = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Volume = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Turnover = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 97 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double BP = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 106u, input, this->mutable_bp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 BV = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bv())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_bv())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double SP = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_sp())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u /* 121 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 122u, input, this->mutable_sp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 SV = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sv())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 130u, input, this->mutable_sv())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Date = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "depthmarketdata.Date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Time = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), static_cast<int>(this->time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "depthmarketdata.Time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Status = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "depthmarketdata.Status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 UpdTime = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TurnoverRate = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u /* 169 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnoverrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double AvPri = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u /* 177 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avpri_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double SA = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u /* 185 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sa_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LimitUp = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u /* 193 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LimitDown = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u /* 201 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CirStock = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(209u /* 209 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cirstock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TotStock = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totstock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double CirVal = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cirval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double TotVal = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u /* 233 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NAV = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nav_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Ratio = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u /* 249 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Committee = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1u /* 257 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &committee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PED = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 265 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double PES = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double WP = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double NP = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 289 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &np_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Z = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 297 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double D = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 305 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double P = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 313 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 TradVol = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradvol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 field1 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 field2 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field3 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 345 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field4 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u /* 353 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field5 = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field5()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field5().data(), static_cast<int>(this->field5().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "depthmarketdata.field5"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field6 = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 450 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field6()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field6().data(), static_cast<int>(this->field6().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "depthmarketdata.field6"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:depthmarketdata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:depthmarketdata)
  return false;
#undef DO_
}

void depthmarketdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:depthmarketdata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Ei = 1;
  if (this->ei() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ei(), output);
  }

  // string SecurityCode = 2;
  if (this->securitycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->securitycode().data(), static_cast<int>(this->securitycode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.SecurityCode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->securitycode(), output);
  }

  // string SecurityName = 3;
  if (this->securityname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->securityname().data(), static_cast<int>(this->securityname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.SecurityName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->securityname(), output);
  }

  // double OpenPrice = 4;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->openprice(), output);
  }

  // double PreClosePrice = 5;
  if (this->precloseprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->precloseprice(), output);
  }

  // double LastPrice = 6;
  if (this->lastprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lastprice(), output);
  }

  // double HighPrice = 7;
  if (this->highprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->highprice(), output);
  }

  // double LowPrice = 8;
  if (this->lowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lowprice(), output);
  }

  // double BidPrice = 9;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->bidprice(), output);
  }

  // double AskPrice = 10;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->askprice(), output);
  }

  // uint32 Volume = 11;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->volume(), output);
  }

  // double Turnover = 12;
  if (this->turnover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->turnover(), output);
  }

  // repeated double BP = 13;
  if (this->bp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bp_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->bp().data(), this->bp_size(), output);
  }

  // repeated uint32 BV = 14;
  if (this->bv_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bv_cached_byte_size_));
  }
  for (int i = 0, n = this->bv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->bv(i), output);
  }

  // repeated double SP = 15;
  if (this->sp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sp_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->sp().data(), this->sp_size(), output);
  }

  // repeated uint32 SV = 16;
  if (this->sv_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _sv_cached_byte_size_));
  }
  for (int i = 0, n = this->sv_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sv(i), output);
  }

  // string Date = 17;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.Date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->date(), output);
  }

  // string Time = 18;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.Time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->time(), output);
  }

  // string Status = 19;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.Status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->status(), output);
  }

  // uint32 UpdTime = 20;
  if (this->updtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->updtime(), output);
  }

  // double TurnoverRate = 21;
  if (this->turnoverrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->turnoverrate(), output);
  }

  // double AvPri = 22;
  if (this->avpri() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->avpri(), output);
  }

  // double SA = 23;
  if (this->sa() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->sa(), output);
  }

  // double LimitUp = 24;
  if (this->limitup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->limitup(), output);
  }

  // double LimitDown = 25;
  if (this->limitdown() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->limitdown(), output);
  }

  // double CirStock = 26;
  if (this->cirstock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->cirstock(), output);
  }

  // double TotStock = 27;
  if (this->totstock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->totstock(), output);
  }

  // double CirVal = 28;
  if (this->cirval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->cirval(), output);
  }

  // double TotVal = 29;
  if (this->totval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->totval(), output);
  }

  // double NAV = 30;
  if (this->nav() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->nav(), output);
  }

  // double Ratio = 31;
  if (this->ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->ratio(), output);
  }

  // double Committee = 32;
  if (this->committee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->committee(), output);
  }

  // double PED = 33;
  if (this->ped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->ped(), output);
  }

  // double PES = 34;
  if (this->pes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->pes(), output);
  }

  // double WP = 35;
  if (this->wp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->wp(), output);
  }

  // double NP = 36;
  if (this->np() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->np(), output);
  }

  // double Z = 37;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->z(), output);
  }

  // double D = 38;
  if (this->d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->d(), output);
  }

  // double P = 39;
  if (this->p() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->p(), output);
  }

  // int32 TradVol = 40;
  if (this->tradvol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->tradvol(), output);
  }

  // int32 field1 = 41;
  if (this->field1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->field1(), output);
  }

  // int32 field2 = 42;
  if (this->field2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->field2(), output);
  }

  // double field3 = 43;
  if (this->field3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->field3(), output);
  }

  // double field4 = 44;
  if (this->field4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->field4(), output);
  }

  // string field5 = 55;
  if (this->field5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field5().data(), static_cast<int>(this->field5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.field5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->field5(), output);
  }

  // string field6 = 56;
  if (this->field6().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field6().data(), static_cast<int>(this->field6().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.field6");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      56, this->field6(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:depthmarketdata)
}

::google::protobuf::uint8* depthmarketdata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:depthmarketdata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 Ei = 1;
  if (this->ei() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ei(), target);
  }

  // string SecurityCode = 2;
  if (this->securitycode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->securitycode().data(), static_cast<int>(this->securitycode().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.SecurityCode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->securitycode(), target);
  }

  // string SecurityName = 3;
  if (this->securityname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->securityname().data(), static_cast<int>(this->securityname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.SecurityName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->securityname(), target);
  }

  // double OpenPrice = 4;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->openprice(), target);
  }

  // double PreClosePrice = 5;
  if (this->precloseprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->precloseprice(), target);
  }

  // double LastPrice = 6;
  if (this->lastprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lastprice(), target);
  }

  // double HighPrice = 7;
  if (this->highprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->highprice(), target);
  }

  // double LowPrice = 8;
  if (this->lowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lowprice(), target);
  }

  // double BidPrice = 9;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->bidprice(), target);
  }

  // double AskPrice = 10;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->askprice(), target);
  }

  // uint32 Volume = 11;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->volume(), target);
  }

  // double Turnover = 12;
  if (this->turnover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->turnover(), target);
  }

  // repeated double BP = 13;
  if (this->bp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _bp_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bp_, target);
  }

  // repeated uint32 BV = 14;
  if (this->bv_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _bv_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->bv_, target);
  }

  // repeated double SP = 15;
  if (this->sp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _sp_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->sp_, target);
  }

  // repeated uint32 SV = 16;
  if (this->sv_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _sv_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sv_, target);
  }

  // string Date = 17;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.Date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->date(), target);
  }

  // string Time = 18;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.Time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->time(), target);
  }

  // string Status = 19;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.Status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->status(), target);
  }

  // uint32 UpdTime = 20;
  if (this->updtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->updtime(), target);
  }

  // double TurnoverRate = 21;
  if (this->turnoverrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->turnoverrate(), target);
  }

  // double AvPri = 22;
  if (this->avpri() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->avpri(), target);
  }

  // double SA = 23;
  if (this->sa() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->sa(), target);
  }

  // double LimitUp = 24;
  if (this->limitup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->limitup(), target);
  }

  // double LimitDown = 25;
  if (this->limitdown() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->limitdown(), target);
  }

  // double CirStock = 26;
  if (this->cirstock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->cirstock(), target);
  }

  // double TotStock = 27;
  if (this->totstock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->totstock(), target);
  }

  // double CirVal = 28;
  if (this->cirval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->cirval(), target);
  }

  // double TotVal = 29;
  if (this->totval() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->totval(), target);
  }

  // double NAV = 30;
  if (this->nav() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->nav(), target);
  }

  // double Ratio = 31;
  if (this->ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->ratio(), target);
  }

  // double Committee = 32;
  if (this->committee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->committee(), target);
  }

  // double PED = 33;
  if (this->ped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->ped(), target);
  }

  // double PES = 34;
  if (this->pes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->pes(), target);
  }

  // double WP = 35;
  if (this->wp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->wp(), target);
  }

  // double NP = 36;
  if (this->np() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->np(), target);
  }

  // double Z = 37;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->z(), target);
  }

  // double D = 38;
  if (this->d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->d(), target);
  }

  // double P = 39;
  if (this->p() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->p(), target);
  }

  // int32 TradVol = 40;
  if (this->tradvol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->tradvol(), target);
  }

  // int32 field1 = 41;
  if (this->field1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->field1(), target);
  }

  // int32 field2 = 42;
  if (this->field2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->field2(), target);
  }

  // double field3 = 43;
  if (this->field3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->field3(), target);
  }

  // double field4 = 44;
  if (this->field4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->field4(), target);
  }

  // string field5 = 55;
  if (this->field5().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field5().data(), static_cast<int>(this->field5().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.field5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->field5(), target);
  }

  // string field6 = 56;
  if (this->field6().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field6().data(), static_cast<int>(this->field6().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "depthmarketdata.field6");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->field6(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:depthmarketdata)
  return target;
}

size_t depthmarketdata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:depthmarketdata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double BP = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->bp_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 BV = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->bv_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bv_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated double SP = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->sp_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sp_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 SV = 16;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->sv_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sv_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string SecurityCode = 2;
  if (this->securitycode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->securitycode());
  }

  // string SecurityName = 3;
  if (this->securityname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->securityname());
  }

  // string Date = 17;
  if (this->date().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string Time = 18;
  if (this->time().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // string Status = 19;
  if (this->status().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string field5 = 55;
  if (this->field5().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field5());
  }

  // string field6 = 56;
  if (this->field6().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field6());
  }

  // int64 Ei = 1;
  if (this->ei() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ei());
  }

  // double OpenPrice = 4;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // double PreClosePrice = 5;
  if (this->precloseprice() != 0) {
    total_size += 1 + 8;
  }

  // double LastPrice = 6;
  if (this->lastprice() != 0) {
    total_size += 1 + 8;
  }

  // double HighPrice = 7;
  if (this->highprice() != 0) {
    total_size += 1 + 8;
  }

  // double LowPrice = 8;
  if (this->lowprice() != 0) {
    total_size += 1 + 8;
  }

  // double BidPrice = 9;
  if (this->bidprice() != 0) {
    total_size += 1 + 8;
  }

  // double AskPrice = 10;
  if (this->askprice() != 0) {
    total_size += 1 + 8;
  }

  // double Turnover = 12;
  if (this->turnover() != 0) {
    total_size += 1 + 8;
  }

  // uint32 Volume = 11;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume());
  }

  // uint32 UpdTime = 20;
  if (this->updtime() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->updtime());
  }

  // double TurnoverRate = 21;
  if (this->turnoverrate() != 0) {
    total_size += 2 + 8;
  }

  // double AvPri = 22;
  if (this->avpri() != 0) {
    total_size += 2 + 8;
  }

  // double SA = 23;
  if (this->sa() != 0) {
    total_size += 2 + 8;
  }

  // double LimitUp = 24;
  if (this->limitup() != 0) {
    total_size += 2 + 8;
  }

  // double LimitDown = 25;
  if (this->limitdown() != 0) {
    total_size += 2 + 8;
  }

  // double CirStock = 26;
  if (this->cirstock() != 0) {
    total_size += 2 + 8;
  }

  // double TotStock = 27;
  if (this->totstock() != 0) {
    total_size += 2 + 8;
  }

  // double CirVal = 28;
  if (this->cirval() != 0) {
    total_size += 2 + 8;
  }

  // double TotVal = 29;
  if (this->totval() != 0) {
    total_size += 2 + 8;
  }

  // double NAV = 30;
  if (this->nav() != 0) {
    total_size += 2 + 8;
  }

  // double Ratio = 31;
  if (this->ratio() != 0) {
    total_size += 2 + 8;
  }

  // double Committee = 32;
  if (this->committee() != 0) {
    total_size += 2 + 8;
  }

  // double PED = 33;
  if (this->ped() != 0) {
    total_size += 2 + 8;
  }

  // double PES = 34;
  if (this->pes() != 0) {
    total_size += 2 + 8;
  }

  // double WP = 35;
  if (this->wp() != 0) {
    total_size += 2 + 8;
  }

  // double NP = 36;
  if (this->np() != 0) {
    total_size += 2 + 8;
  }

  // double Z = 37;
  if (this->z() != 0) {
    total_size += 2 + 8;
  }

  // double D = 38;
  if (this->d() != 0) {
    total_size += 2 + 8;
  }

  // double P = 39;
  if (this->p() != 0) {
    total_size += 2 + 8;
  }

  // int32 TradVol = 40;
  if (this->tradvol() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradvol());
  }

  // int32 field1 = 41;
  if (this->field1() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field1());
  }

  // double field3 = 43;
  if (this->field3() != 0) {
    total_size += 2 + 8;
  }

  // double field4 = 44;
  if (this->field4() != 0) {
    total_size += 2 + 8;
  }

  // int32 field2 = 42;
  if (this->field2() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void depthmarketdata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:depthmarketdata)
  GOOGLE_DCHECK_NE(&from, this);
  const depthmarketdata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const depthmarketdata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:depthmarketdata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:depthmarketdata)
    MergeFrom(*source);
  }
}

void depthmarketdata::MergeFrom(const depthmarketdata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:depthmarketdata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bp_.MergeFrom(from.bp_);
  bv_.MergeFrom(from.bv_);
  sp_.MergeFrom(from.sp_);
  sv_.MergeFrom(from.sv_);
  if (from.securitycode().size() > 0) {

    securitycode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securitycode_);
  }
  if (from.securityname().size() > 0) {

    securityname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.securityname_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.field5().size() > 0) {

    field5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field5_);
  }
  if (from.field6().size() > 0) {

    field6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field6_);
  }
  if (from.ei() != 0) {
    set_ei(from.ei());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.precloseprice() != 0) {
    set_precloseprice(from.precloseprice());
  }
  if (from.lastprice() != 0) {
    set_lastprice(from.lastprice());
  }
  if (from.highprice() != 0) {
    set_highprice(from.highprice());
  }
  if (from.lowprice() != 0) {
    set_lowprice(from.lowprice());
  }
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.turnover() != 0) {
    set_turnover(from.turnover());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.updtime() != 0) {
    set_updtime(from.updtime());
  }
  if (from.turnoverrate() != 0) {
    set_turnoverrate(from.turnoverrate());
  }
  if (from.avpri() != 0) {
    set_avpri(from.avpri());
  }
  if (from.sa() != 0) {
    set_sa(from.sa());
  }
  if (from.limitup() != 0) {
    set_limitup(from.limitup());
  }
  if (from.limitdown() != 0) {
    set_limitdown(from.limitdown());
  }
  if (from.cirstock() != 0) {
    set_cirstock(from.cirstock());
  }
  if (from.totstock() != 0) {
    set_totstock(from.totstock());
  }
  if (from.cirval() != 0) {
    set_cirval(from.cirval());
  }
  if (from.totval() != 0) {
    set_totval(from.totval());
  }
  if (from.nav() != 0) {
    set_nav(from.nav());
  }
  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
  if (from.committee() != 0) {
    set_committee(from.committee());
  }
  if (from.ped() != 0) {
    set_ped(from.ped());
  }
  if (from.pes() != 0) {
    set_pes(from.pes());
  }
  if (from.wp() != 0) {
    set_wp(from.wp());
  }
  if (from.np() != 0) {
    set_np(from.np());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.d() != 0) {
    set_d(from.d());
  }
  if (from.p() != 0) {
    set_p(from.p());
  }
  if (from.tradvol() != 0) {
    set_tradvol(from.tradvol());
  }
  if (from.field1() != 0) {
    set_field1(from.field1());
  }
  if (from.field3() != 0) {
    set_field3(from.field3());
  }
  if (from.field4() != 0) {
    set_field4(from.field4());
  }
  if (from.field2() != 0) {
    set_field2(from.field2());
  }
}

void depthmarketdata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:depthmarketdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void depthmarketdata::CopyFrom(const depthmarketdata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:depthmarketdata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool depthmarketdata::IsInitialized() const {
  return true;
}

void depthmarketdata::Swap(depthmarketdata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void depthmarketdata::InternalSwap(depthmarketdata* other) {
  using std::swap;
  bp_.InternalSwap(&other->bp_);
  bv_.InternalSwap(&other->bv_);
  sp_.InternalSwap(&other->sp_);
  sv_.InternalSwap(&other->sv_);
  securitycode_.Swap(&other->securitycode_);
  securityname_.Swap(&other->securityname_);
  date_.Swap(&other->date_);
  time_.Swap(&other->time_);
  status_.Swap(&other->status_);
  field5_.Swap(&other->field5_);
  field6_.Swap(&other->field6_);
  swap(ei_, other->ei_);
  swap(openprice_, other->openprice_);
  swap(precloseprice_, other->precloseprice_);
  swap(lastprice_, other->lastprice_);
  swap(highprice_, other->highprice_);
  swap(lowprice_, other->lowprice_);
  swap(bidprice_, other->bidprice_);
  swap(askprice_, other->askprice_);
  swap(turnover_, other->turnover_);
  swap(volume_, other->volume_);
  swap(updtime_, other->updtime_);
  swap(turnoverrate_, other->turnoverrate_);
  swap(avpri_, other->avpri_);
  swap(sa_, other->sa_);
  swap(limitup_, other->limitup_);
  swap(limitdown_, other->limitdown_);
  swap(cirstock_, other->cirstock_);
  swap(totstock_, other->totstock_);
  swap(cirval_, other->cirval_);
  swap(totval_, other->totval_);
  swap(nav_, other->nav_);
  swap(ratio_, other->ratio_);
  swap(committee_, other->committee_);
  swap(ped_, other->ped_);
  swap(pes_, other->pes_);
  swap(wp_, other->wp_);
  swap(np_, other->np_);
  swap(z_, other->z_);
  swap(d_, other->d_);
  swap(p_, other->p_);
  swap(tradvol_, other->tradvol_);
  swap(field1_, other->field1_);
  swap(field3_, other->field3_);
  swap(field4_, other->field4_);
  swap(field2_, other->field2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata depthmarketdata::GetMetadata() const {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// depthmarketdata

// int64 Ei = 1;
void depthmarketdata::clear_ei() {
  ei_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 depthmarketdata::ei() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Ei)
  return ei_;
}
void depthmarketdata::set_ei(::google::protobuf::int64 value) {
  
  ei_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Ei)
}

// string SecurityCode = 2;
void depthmarketdata::clear_securitycode() {
  securitycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& depthmarketdata::securitycode() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SecurityCode)
  return securitycode_.GetNoArena();
}
void depthmarketdata::set_securitycode(const ::std::string& value) {
  
  securitycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SecurityCode)
}
#if LANG_CXX11
void depthmarketdata::set_securitycode(::std::string&& value) {
  
  securitycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.SecurityCode)
}
#endif
void depthmarketdata::set_securitycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  securitycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.SecurityCode)
}
void depthmarketdata::set_securitycode(const char* value, size_t size) {
  
  securitycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.SecurityCode)
}
::std::string* depthmarketdata::mutable_securitycode() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.SecurityCode)
  return securitycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* depthmarketdata::release_securitycode() {
  // @@protoc_insertion_point(field_release:depthmarketdata.SecurityCode)
  
  return securitycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void depthmarketdata::set_allocated_securitycode(::std::string* securitycode) {
  if (securitycode != NULL) {
    
  } else {
    
  }
  securitycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitycode);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.SecurityCode)
}

// string SecurityName = 3;
void depthmarketdata::clear_securityname() {
  securityname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& depthmarketdata::securityname() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SecurityName)
  return securityname_.GetNoArena();
}
void depthmarketdata::set_securityname(const ::std::string& value) {
  
  securityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SecurityName)
}
#if LANG_CXX11
void depthmarketdata::set_securityname(::std::string&& value) {
  
  securityname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.SecurityName)
}
#endif
void depthmarketdata::set_securityname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  securityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.SecurityName)
}
void depthmarketdata::set_securityname(const char* value, size_t size) {
  
  securityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.SecurityName)
}
::std::string* depthmarketdata::mutable_securityname() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.SecurityName)
  return securityname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* depthmarketdata::release_securityname() {
  // @@protoc_insertion_point(field_release:depthmarketdata.SecurityName)
  
  return securityname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void depthmarketdata::set_allocated_securityname(::std::string* securityname) {
  if (securityname != NULL) {
    
  } else {
    
  }
  securityname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securityname);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.SecurityName)
}

// double OpenPrice = 4;
void depthmarketdata::clear_openprice() {
  openprice_ = 0;
}
double depthmarketdata::openprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.OpenPrice)
  return openprice_;
}
void depthmarketdata::set_openprice(double value) {
  
  openprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.OpenPrice)
}

// double PreClosePrice = 5;
void depthmarketdata::clear_precloseprice() {
  precloseprice_ = 0;
}
double depthmarketdata::precloseprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.PreClosePrice)
  return precloseprice_;
}
void depthmarketdata::set_precloseprice(double value) {
  
  precloseprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.PreClosePrice)
}

// double LastPrice = 6;
void depthmarketdata::clear_lastprice() {
  lastprice_ = 0;
}
double depthmarketdata::lastprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LastPrice)
  return lastprice_;
}
void depthmarketdata::set_lastprice(double value) {
  
  lastprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LastPrice)
}

// double HighPrice = 7;
void depthmarketdata::clear_highprice() {
  highprice_ = 0;
}
double depthmarketdata::highprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.HighPrice)
  return highprice_;
}
void depthmarketdata::set_highprice(double value) {
  
  highprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.HighPrice)
}

// double LowPrice = 8;
void depthmarketdata::clear_lowprice() {
  lowprice_ = 0;
}
double depthmarketdata::lowprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LowPrice)
  return lowprice_;
}
void depthmarketdata::set_lowprice(double value) {
  
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LowPrice)
}

// double BidPrice = 9;
void depthmarketdata::clear_bidprice() {
  bidprice_ = 0;
}
double depthmarketdata::bidprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.BidPrice)
  return bidprice_;
}
void depthmarketdata::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.BidPrice)
}

// double AskPrice = 10;
void depthmarketdata::clear_askprice() {
  askprice_ = 0;
}
double depthmarketdata::askprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.AskPrice)
  return askprice_;
}
void depthmarketdata::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.AskPrice)
}

// uint32 Volume = 11;
void depthmarketdata::clear_volume() {
  volume_ = 0u;
}
::google::protobuf::uint32 depthmarketdata::volume() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Volume)
  return volume_;
}
void depthmarketdata::set_volume(::google::protobuf::uint32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Volume)
}

// double Turnover = 12;
void depthmarketdata::clear_turnover() {
  turnover_ = 0;
}
double depthmarketdata::turnover() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Turnover)
  return turnover_;
}
void depthmarketdata::set_turnover(double value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Turnover)
}

// repeated double BP = 13;
int depthmarketdata::bp_size() const {
  return bp_.size();
}
void depthmarketdata::clear_bp() {
  bp_.Clear();
}
double depthmarketdata::bp(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.BP)
  return bp_.Get(index);
}
void depthmarketdata::set_bp(int index, double value) {
  bp_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.BP)
}
void depthmarketdata::add_bp(double value) {
  bp_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.BP)
}
const ::google::protobuf::RepeatedField< double >&
depthmarketdata::bp() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.BP)
  return bp_;
}
::google::protobuf::RepeatedField< double >*
depthmarketdata::mutable_bp() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.BP)
  return &bp_;
}

// repeated uint32 BV = 14;
int depthmarketdata::bv_size() const {
  return bv_.size();
}
void depthmarketdata::clear_bv() {
  bv_.Clear();
}
::google::protobuf::uint32 depthmarketdata::bv(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.BV)
  return bv_.Get(index);
}
void depthmarketdata::set_bv(int index, ::google::protobuf::uint32 value) {
  bv_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.BV)
}
void depthmarketdata::add_bv(::google::protobuf::uint32 value) {
  bv_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.BV)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
depthmarketdata::bv() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.BV)
  return bv_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
depthmarketdata::mutable_bv() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.BV)
  return &bv_;
}

// repeated double SP = 15;
int depthmarketdata::sp_size() const {
  return sp_.size();
}
void depthmarketdata::clear_sp() {
  sp_.Clear();
}
double depthmarketdata::sp(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SP)
  return sp_.Get(index);
}
void depthmarketdata::set_sp(int index, double value) {
  sp_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SP)
}
void depthmarketdata::add_sp(double value) {
  sp_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.SP)
}
const ::google::protobuf::RepeatedField< double >&
depthmarketdata::sp() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.SP)
  return sp_;
}
::google::protobuf::RepeatedField< double >*
depthmarketdata::mutable_sp() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.SP)
  return &sp_;
}

// repeated uint32 SV = 16;
int depthmarketdata::sv_size() const {
  return sv_.size();
}
void depthmarketdata::clear_sv() {
  sv_.Clear();
}
::google::protobuf::uint32 depthmarketdata::sv(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SV)
  return sv_.Get(index);
}
void depthmarketdata::set_sv(int index, ::google::protobuf::uint32 value) {
  sv_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SV)
}
void depthmarketdata::add_sv(::google::protobuf::uint32 value) {
  sv_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.SV)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
depthmarketdata::sv() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.SV)
  return sv_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
depthmarketdata::mutable_sv() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.SV)
  return &sv_;
}

// string Date = 17;
void depthmarketdata::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& depthmarketdata::date() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Date)
  return date_.GetNoArena();
}
void depthmarketdata::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.Date)
}
#if LANG_CXX11
void depthmarketdata::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.Date)
}
#endif
void depthmarketdata::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.Date)
}
void depthmarketdata::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.Date)
}
::std::string* depthmarketdata::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* depthmarketdata::release_date() {
  // @@protoc_insertion_point(field_release:depthmarketdata.Date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void depthmarketdata::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.Date)
}

// string Time = 18;
void depthmarketdata::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& depthmarketdata::time() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Time)
  return time_.GetNoArena();
}
void depthmarketdata::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.Time)
}
#if LANG_CXX11
void depthmarketdata::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.Time)
}
#endif
void depthmarketdata::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.Time)
}
void depthmarketdata::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.Time)
}
::std::string* depthmarketdata::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.Time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* depthmarketdata::release_time() {
  // @@protoc_insertion_point(field_release:depthmarketdata.Time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void depthmarketdata::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.Time)
}

// string Status = 19;
void depthmarketdata::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& depthmarketdata::status() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Status)
  return status_.GetNoArena();
}
void depthmarketdata::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.Status)
}
#if LANG_CXX11
void depthmarketdata::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.Status)
}
#endif
void depthmarketdata::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.Status)
}
void depthmarketdata::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.Status)
}
::std::string* depthmarketdata::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* depthmarketdata::release_status() {
  // @@protoc_insertion_point(field_release:depthmarketdata.Status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void depthmarketdata::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.Status)
}

// uint32 UpdTime = 20;
void depthmarketdata::clear_updtime() {
  updtime_ = 0u;
}
::google::protobuf::uint32 depthmarketdata::updtime() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.UpdTime)
  return updtime_;
}
void depthmarketdata::set_updtime(::google::protobuf::uint32 value) {
  
  updtime_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.UpdTime)
}

// double TurnoverRate = 21;
void depthmarketdata::clear_turnoverrate() {
  turnoverrate_ = 0;
}
double depthmarketdata::turnoverrate() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TurnoverRate)
  return turnoverrate_;
}
void depthmarketdata::set_turnoverrate(double value) {
  
  turnoverrate_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TurnoverRate)
}

// double AvPri = 22;
void depthmarketdata::clear_avpri() {
  avpri_ = 0;
}
double depthmarketdata::avpri() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.AvPri)
  return avpri_;
}
void depthmarketdata::set_avpri(double value) {
  
  avpri_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.AvPri)
}

// double SA = 23;
void depthmarketdata::clear_sa() {
  sa_ = 0;
}
double depthmarketdata::sa() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SA)
  return sa_;
}
void depthmarketdata::set_sa(double value) {
  
  sa_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.SA)
}

// double LimitUp = 24;
void depthmarketdata::clear_limitup() {
  limitup_ = 0;
}
double depthmarketdata::limitup() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LimitUp)
  return limitup_;
}
void depthmarketdata::set_limitup(double value) {
  
  limitup_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LimitUp)
}

// double LimitDown = 25;
void depthmarketdata::clear_limitdown() {
  limitdown_ = 0;
}
double depthmarketdata::limitdown() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LimitDown)
  return limitdown_;
}
void depthmarketdata::set_limitdown(double value) {
  
  limitdown_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LimitDown)
}

// double CirStock = 26;
void depthmarketdata::clear_cirstock() {
  cirstock_ = 0;
}
double depthmarketdata::cirstock() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.CirStock)
  return cirstock_;
}
void depthmarketdata::set_cirstock(double value) {
  
  cirstock_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.CirStock)
}

// double TotStock = 27;
void depthmarketdata::clear_totstock() {
  totstock_ = 0;
}
double depthmarketdata::totstock() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TotStock)
  return totstock_;
}
void depthmarketdata::set_totstock(double value) {
  
  totstock_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TotStock)
}

// double CirVal = 28;
void depthmarketdata::clear_cirval() {
  cirval_ = 0;
}
double depthmarketdata::cirval() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.CirVal)
  return cirval_;
}
void depthmarketdata::set_cirval(double value) {
  
  cirval_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.CirVal)
}

// double TotVal = 29;
void depthmarketdata::clear_totval() {
  totval_ = 0;
}
double depthmarketdata::totval() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TotVal)
  return totval_;
}
void depthmarketdata::set_totval(double value) {
  
  totval_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TotVal)
}

// double NAV = 30;
void depthmarketdata::clear_nav() {
  nav_ = 0;
}
double depthmarketdata::nav() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.NAV)
  return nav_;
}
void depthmarketdata::set_nav(double value) {
  
  nav_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.NAV)
}

// double Ratio = 31;
void depthmarketdata::clear_ratio() {
  ratio_ = 0;
}
double depthmarketdata::ratio() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Ratio)
  return ratio_;
}
void depthmarketdata::set_ratio(double value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Ratio)
}

// double Committee = 32;
void depthmarketdata::clear_committee() {
  committee_ = 0;
}
double depthmarketdata::committee() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Committee)
  return committee_;
}
void depthmarketdata::set_committee(double value) {
  
  committee_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Committee)
}

// double PED = 33;
void depthmarketdata::clear_ped() {
  ped_ = 0;
}
double depthmarketdata::ped() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.PED)
  return ped_;
}
void depthmarketdata::set_ped(double value) {
  
  ped_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.PED)
}

// double PES = 34;
void depthmarketdata::clear_pes() {
  pes_ = 0;
}
double depthmarketdata::pes() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.PES)
  return pes_;
}
void depthmarketdata::set_pes(double value) {
  
  pes_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.PES)
}

// double WP = 35;
void depthmarketdata::clear_wp() {
  wp_ = 0;
}
double depthmarketdata::wp() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.WP)
  return wp_;
}
void depthmarketdata::set_wp(double value) {
  
  wp_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.WP)
}

// double NP = 36;
void depthmarketdata::clear_np() {
  np_ = 0;
}
double depthmarketdata::np() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.NP)
  return np_;
}
void depthmarketdata::set_np(double value) {
  
  np_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.NP)
}

// double Z = 37;
void depthmarketdata::clear_z() {
  z_ = 0;
}
double depthmarketdata::z() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Z)
  return z_;
}
void depthmarketdata::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Z)
}

// double D = 38;
void depthmarketdata::clear_d() {
  d_ = 0;
}
double depthmarketdata::d() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.D)
  return d_;
}
void depthmarketdata::set_d(double value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.D)
}

// double P = 39;
void depthmarketdata::clear_p() {
  p_ = 0;
}
double depthmarketdata::p() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.P)
  return p_;
}
void depthmarketdata::set_p(double value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.P)
}

// int32 TradVol = 40;
void depthmarketdata::clear_tradvol() {
  tradvol_ = 0;
}
::google::protobuf::int32 depthmarketdata::tradvol() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TradVol)
  return tradvol_;
}
void depthmarketdata::set_tradvol(::google::protobuf::int32 value) {
  
  tradvol_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TradVol)
}

// int32 field1 = 41;
void depthmarketdata::clear_field1() {
  field1_ = 0;
}
::google::protobuf::int32 depthmarketdata::field1() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field1)
  return field1_;
}
void depthmarketdata::set_field1(::google::protobuf::int32 value) {
  
  field1_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field1)
}

// int32 field2 = 42;
void depthmarketdata::clear_field2() {
  field2_ = 0;
}
::google::protobuf::int32 depthmarketdata::field2() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field2)
  return field2_;
}
void depthmarketdata::set_field2(::google::protobuf::int32 value) {
  
  field2_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field2)
}

// double field3 = 43;
void depthmarketdata::clear_field3() {
  field3_ = 0;
}
double depthmarketdata::field3() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field3)
  return field3_;
}
void depthmarketdata::set_field3(double value) {
  
  field3_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field3)
}

// double field4 = 44;
void depthmarketdata::clear_field4() {
  field4_ = 0;
}
double depthmarketdata::field4() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field4)
  return field4_;
}
void depthmarketdata::set_field4(double value) {
  
  field4_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field4)
}

// string field5 = 55;
void depthmarketdata::clear_field5() {
  field5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& depthmarketdata::field5() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field5)
  return field5_.GetNoArena();
}
void depthmarketdata::set_field5(const ::std::string& value) {
  
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.field5)
}
#if LANG_CXX11
void depthmarketdata::set_field5(::std::string&& value) {
  
  field5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.field5)
}
#endif
void depthmarketdata::set_field5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.field5)
}
void depthmarketdata::set_field5(const char* value, size_t size) {
  
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.field5)
}
::std::string* depthmarketdata::mutable_field5() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.field5)
  return field5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* depthmarketdata::release_field5() {
  // @@protoc_insertion_point(field_release:depthmarketdata.field5)
  
  return field5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void depthmarketdata::set_allocated_field5(::std::string* field5) {
  if (field5 != NULL) {
    
  } else {
    
  }
  field5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field5);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.field5)
}

// string field6 = 56;
void depthmarketdata::clear_field6() {
  field6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& depthmarketdata::field6() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field6)
  return field6_.GetNoArena();
}
void depthmarketdata::set_field6(const ::std::string& value) {
  
  field6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.field6)
}
#if LANG_CXX11
void depthmarketdata::set_field6(::std::string&& value) {
  
  field6_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.field6)
}
#endif
void depthmarketdata::set_field6(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.field6)
}
void depthmarketdata::set_field6(const char* value, size_t size) {
  
  field6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.field6)
}
::std::string* depthmarketdata::mutable_field6() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.field6)
  return field6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* depthmarketdata::release_field6() {
  // @@protoc_insertion_point(field_release:depthmarketdata.field6)
  
  return field6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void depthmarketdata::set_allocated_field6(::std::string* field6) {
  if (field6 != NULL) {
    
  } else {
    
  }
  field6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field6);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.field6)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int clearsignal::kTradingdayFieldNumber;
const int clearsignal::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

clearsignal::clearsignal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_depthmarketdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearsignal)
}
clearsignal::clearsignal(const clearsignal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tradingday().size() > 0) {
    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  update_time_ = from.update_time_;
  // @@protoc_insertion_point(copy_constructor:clearsignal)
}

void clearsignal::SharedCtor() {
  tradingday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = 0u;
  _cached_size_ = 0;
}

clearsignal::~clearsignal() {
  // @@protoc_insertion_point(destructor:clearsignal)
  SharedDtor();
}

void clearsignal::SharedDtor() {
  tradingday_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void clearsignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clearsignal::descriptor() {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const clearsignal& clearsignal::default_instance() {
  protobuf_depthmarketdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

clearsignal* clearsignal::New(::google::protobuf::Arena* arena) const {
  clearsignal* n = new clearsignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void clearsignal::Clear() {
// @@protoc_insertion_point(message_clear_start:clearsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  update_time_ = 0u;
  _internal_metadata_.Clear();
}

bool clearsignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:clearsignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string tradingday = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradingday().data(), static_cast<int>(this->tradingday().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "clearsignal.tradingday"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearsignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearsignal)
  return false;
#undef DO_
}

void clearsignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingday = 1;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clearsignal.tradingday");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tradingday(), output);
  }

  // uint32 update_time = 2;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:clearsignal)
}

::google::protobuf::uint8* clearsignal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:clearsignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingday = 1;
  if (this->tradingday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradingday().data(), static_cast<int>(this->tradingday().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "clearsignal.tradingday");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tradingday(), target);
  }

  // uint32 update_time = 2;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clearsignal)
  return target;
}

size_t clearsignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearsignal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string tradingday = 1;
  if (this->tradingday().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradingday());
  }

  // uint32 update_time = 2;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clearsignal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:clearsignal)
  GOOGLE_DCHECK_NE(&from, this);
  const clearsignal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const clearsignal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:clearsignal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:clearsignal)
    MergeFrom(*source);
  }
}

void clearsignal::MergeFrom(const clearsignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearsignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingday().size() > 0) {

    tradingday_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tradingday_);
  }
  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
}

void clearsignal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:clearsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clearsignal::CopyFrom(const clearsignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearsignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clearsignal::IsInitialized() const {
  return true;
}

void clearsignal::Swap(clearsignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void clearsignal::InternalSwap(clearsignal* other) {
  using std::swap;
  tradingday_.Swap(&other->tradingday_);
  swap(update_time_, other->update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata clearsignal::GetMetadata() const {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// clearsignal

// string tradingday = 1;
void clearsignal::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& clearsignal::tradingday() const {
  // @@protoc_insertion_point(field_get:clearsignal.tradingday)
  return tradingday_.GetNoArena();
}
void clearsignal::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearsignal.tradingday)
}
#if LANG_CXX11
void clearsignal::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clearsignal.tradingday)
}
#endif
void clearsignal::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearsignal.tradingday)
}
void clearsignal::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearsignal.tradingday)
}
::std::string* clearsignal::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:clearsignal.tradingday)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* clearsignal::release_tradingday() {
  // @@protoc_insertion_point(field_release:clearsignal.tradingday)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void clearsignal::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:clearsignal.tradingday)
}

// uint32 update_time = 2;
void clearsignal::clear_update_time() {
  update_time_ = 0u;
}
::google::protobuf::uint32 clearsignal::update_time() const {
  // @@protoc_insertion_point(field_get:clearsignal.update_time)
  return update_time_;
}
void clearsignal::set_update_time(::google::protobuf::uint32 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:clearsignal.update_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int heartbeat::kUpdateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

heartbeat::heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_depthmarketdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:heartbeat)
}
heartbeat::heartbeat(const heartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_time_ = from.update_time_;
  // @@protoc_insertion_point(copy_constructor:heartbeat)
}

void heartbeat::SharedCtor() {
  update_time_ = 0u;
  _cached_size_ = 0;
}

heartbeat::~heartbeat() {
  // @@protoc_insertion_point(destructor:heartbeat)
  SharedDtor();
}

void heartbeat::SharedDtor() {
}

void heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* heartbeat::descriptor() {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const heartbeat& heartbeat::default_instance() {
  protobuf_depthmarketdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

heartbeat* heartbeat::New(::google::protobuf::Arena* arena) const {
  heartbeat* n = new heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  update_time_ = 0u;
  _internal_metadata_.Clear();
}

bool heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 update_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:heartbeat)
  return false;
#undef DO_
}

void heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 update_time = 1;
  if (this->update_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:heartbeat)
}

::google::protobuf::uint8* heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 update_time = 1;
  if (this->update_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:heartbeat)
  return target;
}

size_t heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:heartbeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 update_time = 1;
  if (this->update_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:heartbeat)
    MergeFrom(*source);
  }
}

void heartbeat::MergeFrom(const heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.update_time() != 0) {
    set_update_time(from.update_time());
  }
}

void heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void heartbeat::CopyFrom(const heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool heartbeat::IsInitialized() const {
  return true;
}

void heartbeat::Swap(heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void heartbeat::InternalSwap(heartbeat* other) {
  using std::swap;
  swap(update_time_, other->update_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata heartbeat::GetMetadata() const {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// heartbeat

// uint32 update_time = 1;
void heartbeat::clear_update_time() {
  update_time_ = 0u;
}
::google::protobuf::uint32 heartbeat::update_time() const {
  // @@protoc_insertion_point(field_get:heartbeat.update_time)
  return update_time_;
}
void heartbeat::set_update_time(::google::protobuf::uint32 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:heartbeat.update_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int protomessage::kMarketDataFieldNumber;
const int protomessage::kClearSignalFieldNumber;
const int protomessage::kHeartBeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

protomessage::protomessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_depthmarketdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protomessage)
}
protomessage::protomessage(const protomessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_which_message();
  switch (from.which_message_case()) {
    case kMarketData: {
      mutable_market_data()->::depthmarketdata::MergeFrom(from.market_data());
      break;
    }
    case kClearSignal: {
      mutable_clear_signal()->::clearsignal::MergeFrom(from.clear_signal());
      break;
    }
    case kHeartBeat: {
      mutable_heart_beat()->::heartbeat::MergeFrom(from.heart_beat());
      break;
    }
    case WHICH_MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protomessage)
}

void protomessage::SharedCtor() {
  clear_has_which_message();
  _cached_size_ = 0;
}

protomessage::~protomessage() {
  // @@protoc_insertion_point(destructor:protomessage)
  SharedDtor();
}

void protomessage::SharedDtor() {
  if (has_which_message()) {
    clear_which_message();
  }
}

void protomessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* protomessage::descriptor() {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const protomessage& protomessage::default_instance() {
  protobuf_depthmarketdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

protomessage* protomessage::New(::google::protobuf::Arena* arena) const {
  protomessage* n = new protomessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void protomessage::clear_which_message() {
// @@protoc_insertion_point(one_of_clear_start:protomessage)
  switch (which_message_case()) {
    case kMarketData: {
      delete which_message_.market_data_;
      break;
    }
    case kClearSignal: {
      delete which_message_.clear_signal_;
      break;
    }
    case kHeartBeat: {
      delete which_message_.heart_beat_;
      break;
    }
    case WHICH_MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WHICH_MESSAGE_NOT_SET;
}


void protomessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protomessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_which_message();
  _internal_metadata_.Clear();
}

bool protomessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protomessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .depthmarketdata market_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_market_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .clearsignal clear_signal = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clear_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .heartbeat heart_beat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heart_beat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protomessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protomessage)
  return false;
#undef DO_
}

void protomessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protomessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .depthmarketdata market_data = 1;
  if (has_market_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *which_message_.market_data_, output);
  }

  // .clearsignal clear_signal = 2;
  if (has_clear_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *which_message_.clear_signal_, output);
  }

  // .heartbeat heart_beat = 3;
  if (has_heart_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *which_message_.heart_beat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protomessage)
}

::google::protobuf::uint8* protomessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protomessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .depthmarketdata market_data = 1;
  if (has_market_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *which_message_.market_data_, deterministic, target);
  }

  // .clearsignal clear_signal = 2;
  if (has_clear_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *which_message_.clear_signal_, deterministic, target);
  }

  // .heartbeat heart_beat = 3;
  if (has_heart_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *which_message_.heart_beat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protomessage)
  return target;
}

size_t protomessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protomessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (which_message_case()) {
    // .depthmarketdata market_data = 1;
    case kMarketData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *which_message_.market_data_);
      break;
    }
    // .clearsignal clear_signal = 2;
    case kClearSignal: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *which_message_.clear_signal_);
      break;
    }
    // .heartbeat heart_beat = 3;
    case kHeartBeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *which_message_.heart_beat_);
      break;
    }
    case WHICH_MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void protomessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protomessage)
  GOOGLE_DCHECK_NE(&from, this);
  const protomessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const protomessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protomessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protomessage)
    MergeFrom(*source);
  }
}

void protomessage::MergeFrom(const protomessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protomessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.which_message_case()) {
    case kMarketData: {
      mutable_market_data()->::depthmarketdata::MergeFrom(from.market_data());
      break;
    }
    case kClearSignal: {
      mutable_clear_signal()->::clearsignal::MergeFrom(from.clear_signal());
      break;
    }
    case kHeartBeat: {
      mutable_heart_beat()->::heartbeat::MergeFrom(from.heart_beat());
      break;
    }
    case WHICH_MESSAGE_NOT_SET: {
      break;
    }
  }
}

void protomessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protomessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void protomessage::CopyFrom(const protomessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protomessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool protomessage::IsInitialized() const {
  return true;
}

void protomessage::Swap(protomessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void protomessage::InternalSwap(protomessage* other) {
  using std::swap;
  swap(which_message_, other->which_message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata protomessage::GetMetadata() const {
  protobuf_depthmarketdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_depthmarketdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// protomessage

// .depthmarketdata market_data = 1;
bool protomessage::has_market_data() const {
  return which_message_case() == kMarketData;
}
void protomessage::set_has_market_data() {
  _oneof_case_[0] = kMarketData;
}
void protomessage::clear_market_data() {
  if (has_market_data()) {
    delete which_message_.market_data_;
    clear_has_which_message();
  }
}
 const ::depthmarketdata& protomessage::market_data() const {
  // @@protoc_insertion_point(field_get:protomessage.market_data)
  return has_market_data()
      ? *which_message_.market_data_
      : ::depthmarketdata::default_instance();
}
::depthmarketdata* protomessage::mutable_market_data() {
  if (!has_market_data()) {
    clear_which_message();
    set_has_market_data();
    which_message_.market_data_ = new ::depthmarketdata;
  }
  // @@protoc_insertion_point(field_mutable:protomessage.market_data)
  return which_message_.market_data_;
}
::depthmarketdata* protomessage::release_market_data() {
  // @@protoc_insertion_point(field_release:protomessage.market_data)
  if (has_market_data()) {
    clear_has_which_message();
    ::depthmarketdata* temp = which_message_.market_data_;
    which_message_.market_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void protomessage::set_allocated_market_data(::depthmarketdata* market_data) {
  clear_which_message();
  if (market_data) {
    set_has_market_data();
    which_message_.market_data_ = market_data;
  }
  // @@protoc_insertion_point(field_set_allocated:protomessage.market_data)
}

// .clearsignal clear_signal = 2;
bool protomessage::has_clear_signal() const {
  return which_message_case() == kClearSignal;
}
void protomessage::set_has_clear_signal() {
  _oneof_case_[0] = kClearSignal;
}
void protomessage::clear_clear_signal() {
  if (has_clear_signal()) {
    delete which_message_.clear_signal_;
    clear_has_which_message();
  }
}
 const ::clearsignal& protomessage::clear_signal() const {
  // @@protoc_insertion_point(field_get:protomessage.clear_signal)
  return has_clear_signal()
      ? *which_message_.clear_signal_
      : ::clearsignal::default_instance();
}
::clearsignal* protomessage::mutable_clear_signal() {
  if (!has_clear_signal()) {
    clear_which_message();
    set_has_clear_signal();
    which_message_.clear_signal_ = new ::clearsignal;
  }
  // @@protoc_insertion_point(field_mutable:protomessage.clear_signal)
  return which_message_.clear_signal_;
}
::clearsignal* protomessage::release_clear_signal() {
  // @@protoc_insertion_point(field_release:protomessage.clear_signal)
  if (has_clear_signal()) {
    clear_has_which_message();
    ::clearsignal* temp = which_message_.clear_signal_;
    which_message_.clear_signal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void protomessage::set_allocated_clear_signal(::clearsignal* clear_signal) {
  clear_which_message();
  if (clear_signal) {
    set_has_clear_signal();
    which_message_.clear_signal_ = clear_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:protomessage.clear_signal)
}

// .heartbeat heart_beat = 3;
bool protomessage::has_heart_beat() const {
  return which_message_case() == kHeartBeat;
}
void protomessage::set_has_heart_beat() {
  _oneof_case_[0] = kHeartBeat;
}
void protomessage::clear_heart_beat() {
  if (has_heart_beat()) {
    delete which_message_.heart_beat_;
    clear_has_which_message();
  }
}
 const ::heartbeat& protomessage::heart_beat() const {
  // @@protoc_insertion_point(field_get:protomessage.heart_beat)
  return has_heart_beat()
      ? *which_message_.heart_beat_
      : ::heartbeat::default_instance();
}
::heartbeat* protomessage::mutable_heart_beat() {
  if (!has_heart_beat()) {
    clear_which_message();
    set_has_heart_beat();
    which_message_.heart_beat_ = new ::heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:protomessage.heart_beat)
  return which_message_.heart_beat_;
}
::heartbeat* protomessage::release_heart_beat() {
  // @@protoc_insertion_point(field_release:protomessage.heart_beat)
  if (has_heart_beat()) {
    clear_has_which_message();
    ::heartbeat* temp = which_message_.heart_beat_;
    which_message_.heart_beat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void protomessage::set_allocated_heart_beat(::heartbeat* heart_beat) {
  clear_which_message();
  if (heart_beat) {
    set_has_heart_beat();
    which_message_.heart_beat_ = heart_beat;
  }
  // @@protoc_insertion_point(field_set_allocated:protomessage.heart_beat)
}

bool protomessage::has_which_message() const {
  return which_message_case() != WHICH_MESSAGE_NOT_SET;
}
void protomessage::clear_has_which_message() {
  _oneof_case_[0] = WHICH_MESSAGE_NOT_SET;
}
protomessage::WhichMessageCase protomessage::which_message_case() const {
  return protomessage::WhichMessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
