// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: depthmarketdata.proto

#ifndef PROTOBUF_depthmarketdata_2eproto__INCLUDED
#define PROTOBUF_depthmarketdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class clearsignal;
class clearsignalDefaultTypeInternal;
extern clearsignalDefaultTypeInternal _clearsignal_default_instance_;
class depthmarketdata;
class depthmarketdataDefaultTypeInternal;
extern depthmarketdataDefaultTypeInternal _depthmarketdata_default_instance_;
class heartbeat;
class heartbeatDefaultTypeInternal;
extern heartbeatDefaultTypeInternal _heartbeat_default_instance_;
class protomessage;
class protomessageDefaultTypeInternal;
extern protomessageDefaultTypeInternal _protomessage_default_instance_;

namespace protobuf_depthmarketdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_depthmarketdata_2eproto

// ===================================================================

class depthmarketdata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:depthmarketdata) */ {
 public:
  depthmarketdata();
  virtual ~depthmarketdata();

  depthmarketdata(const depthmarketdata& from);

  inline depthmarketdata& operator=(const depthmarketdata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  depthmarketdata(depthmarketdata&& from) noexcept
    : depthmarketdata() {
    *this = ::std::move(from);
  }

  inline depthmarketdata& operator=(depthmarketdata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const depthmarketdata& default_instance();

  static inline const depthmarketdata* internal_default_instance() {
    return reinterpret_cast<const depthmarketdata*>(
               &_depthmarketdata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(depthmarketdata* other);
  friend void swap(depthmarketdata& a, depthmarketdata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline depthmarketdata* New() const PROTOBUF_FINAL { return New(NULL); }

  depthmarketdata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const depthmarketdata& from);
  void MergeFrom(const depthmarketdata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(depthmarketdata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double BP = 13;
  int bp_size() const;
  void clear_bp();
  static const int kBPFieldNumber = 13;
  double bp(int index) const;
  void set_bp(int index, double value);
  void add_bp(double value);
  const ::google::protobuf::RepeatedField< double >&
      bp() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_bp();

  // repeated uint32 BV = 14;
  int bv_size() const;
  void clear_bv();
  static const int kBVFieldNumber = 14;
  ::google::protobuf::uint32 bv(int index) const;
  void set_bv(int index, ::google::protobuf::uint32 value);
  void add_bv(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      bv() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_bv();

  // repeated double SP = 15;
  int sp_size() const;
  void clear_sp();
  static const int kSPFieldNumber = 15;
  double sp(int index) const;
  void set_sp(int index, double value);
  void add_sp(double value);
  const ::google::protobuf::RepeatedField< double >&
      sp() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_sp();

  // repeated uint32 SV = 16;
  int sv_size() const;
  void clear_sv();
  static const int kSVFieldNumber = 16;
  ::google::protobuf::uint32 sv(int index) const;
  void set_sv(int index, ::google::protobuf::uint32 value);
  void add_sv(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      sv() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_sv();

  // string SecurityCode = 2;
  void clear_securitycode();
  static const int kSecurityCodeFieldNumber = 2;
  const ::std::string& securitycode() const;
  void set_securitycode(const ::std::string& value);
  #if LANG_CXX11
  void set_securitycode(::std::string&& value);
  #endif
  void set_securitycode(const char* value);
  void set_securitycode(const char* value, size_t size);
  ::std::string* mutable_securitycode();
  ::std::string* release_securitycode();
  void set_allocated_securitycode(::std::string* securitycode);

  // string SecurityName = 3;
  void clear_securityname();
  static const int kSecurityNameFieldNumber = 3;
  const ::std::string& securityname() const;
  void set_securityname(const ::std::string& value);
  #if LANG_CXX11
  void set_securityname(::std::string&& value);
  #endif
  void set_securityname(const char* value);
  void set_securityname(const char* value, size_t size);
  ::std::string* mutable_securityname();
  ::std::string* release_securityname();
  void set_allocated_securityname(::std::string* securityname);

  // string Date = 17;
  void clear_date();
  static const int kDateFieldNumber = 17;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // string Time = 18;
  void clear_time();
  static const int kTimeFieldNumber = 18;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // string Status = 19;
  void clear_status();
  static const int kStatusFieldNumber = 19;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string field5 = 55;
  void clear_field5();
  static const int kField5FieldNumber = 55;
  const ::std::string& field5() const;
  void set_field5(const ::std::string& value);
  #if LANG_CXX11
  void set_field5(::std::string&& value);
  #endif
  void set_field5(const char* value);
  void set_field5(const char* value, size_t size);
  ::std::string* mutable_field5();
  ::std::string* release_field5();
  void set_allocated_field5(::std::string* field5);

  // string field6 = 56;
  void clear_field6();
  static const int kField6FieldNumber = 56;
  const ::std::string& field6() const;
  void set_field6(const ::std::string& value);
  #if LANG_CXX11
  void set_field6(::std::string&& value);
  #endif
  void set_field6(const char* value);
  void set_field6(const char* value, size_t size);
  ::std::string* mutable_field6();
  ::std::string* release_field6();
  void set_allocated_field6(::std::string* field6);

  // int64 Ei = 1;
  void clear_ei();
  static const int kEiFieldNumber = 1;
  ::google::protobuf::int64 ei() const;
  void set_ei(::google::protobuf::int64 value);

  // double OpenPrice = 4;
  void clear_openprice();
  static const int kOpenPriceFieldNumber = 4;
  double openprice() const;
  void set_openprice(double value);

  // double PreClosePrice = 5;
  void clear_precloseprice();
  static const int kPreClosePriceFieldNumber = 5;
  double precloseprice() const;
  void set_precloseprice(double value);

  // double LastPrice = 6;
  void clear_lastprice();
  static const int kLastPriceFieldNumber = 6;
  double lastprice() const;
  void set_lastprice(double value);

  // double HighPrice = 7;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 7;
  double highprice() const;
  void set_highprice(double value);

  // double LowPrice = 8;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 8;
  double lowprice() const;
  void set_lowprice(double value);

  // double BidPrice = 9;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 9;
  double bidprice() const;
  void set_bidprice(double value);

  // double AskPrice = 10;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 10;
  double askprice() const;
  void set_askprice(double value);

  // double Turnover = 12;
  void clear_turnover();
  static const int kTurnoverFieldNumber = 12;
  double turnover() const;
  void set_turnover(double value);

  // uint32 Volume = 11;
  void clear_volume();
  static const int kVolumeFieldNumber = 11;
  ::google::protobuf::uint32 volume() const;
  void set_volume(::google::protobuf::uint32 value);

  // uint32 UpdTime = 20;
  void clear_updtime();
  static const int kUpdTimeFieldNumber = 20;
  ::google::protobuf::uint32 updtime() const;
  void set_updtime(::google::protobuf::uint32 value);

  // double TurnoverRate = 21;
  void clear_turnoverrate();
  static const int kTurnoverRateFieldNumber = 21;
  double turnoverrate() const;
  void set_turnoverrate(double value);

  // double AvPri = 22;
  void clear_avpri();
  static const int kAvPriFieldNumber = 22;
  double avpri() const;
  void set_avpri(double value);

  // double SA = 23;
  void clear_sa();
  static const int kSAFieldNumber = 23;
  double sa() const;
  void set_sa(double value);

  // double LimitUp = 24;
  void clear_limitup();
  static const int kLimitUpFieldNumber = 24;
  double limitup() const;
  void set_limitup(double value);

  // double LimitDown = 25;
  void clear_limitdown();
  static const int kLimitDownFieldNumber = 25;
  double limitdown() const;
  void set_limitdown(double value);

  // double CirStock = 26;
  void clear_cirstock();
  static const int kCirStockFieldNumber = 26;
  double cirstock() const;
  void set_cirstock(double value);

  // double TotStock = 27;
  void clear_totstock();
  static const int kTotStockFieldNumber = 27;
  double totstock() const;
  void set_totstock(double value);

  // double CirVal = 28;
  void clear_cirval();
  static const int kCirValFieldNumber = 28;
  double cirval() const;
  void set_cirval(double value);

  // double TotVal = 29;
  void clear_totval();
  static const int kTotValFieldNumber = 29;
  double totval() const;
  void set_totval(double value);

  // double NAV = 30;
  void clear_nav();
  static const int kNAVFieldNumber = 30;
  double nav() const;
  void set_nav(double value);

  // double Ratio = 31;
  void clear_ratio();
  static const int kRatioFieldNumber = 31;
  double ratio() const;
  void set_ratio(double value);

  // double Committee = 32;
  void clear_committee();
  static const int kCommitteeFieldNumber = 32;
  double committee() const;
  void set_committee(double value);

  // double PED = 33;
  void clear_ped();
  static const int kPEDFieldNumber = 33;
  double ped() const;
  void set_ped(double value);

  // double PES = 34;
  void clear_pes();
  static const int kPESFieldNumber = 34;
  double pes() const;
  void set_pes(double value);

  // double WP = 35;
  void clear_wp();
  static const int kWPFieldNumber = 35;
  double wp() const;
  void set_wp(double value);

  // double NP = 36;
  void clear_np();
  static const int kNPFieldNumber = 36;
  double np() const;
  void set_np(double value);

  // double Z = 37;
  void clear_z();
  static const int kZFieldNumber = 37;
  double z() const;
  void set_z(double value);

  // double D = 38;
  void clear_d();
  static const int kDFieldNumber = 38;
  double d() const;
  void set_d(double value);

  // double P = 39;
  void clear_p();
  static const int kPFieldNumber = 39;
  double p() const;
  void set_p(double value);

  // int32 TradVol = 40;
  void clear_tradvol();
  static const int kTradVolFieldNumber = 40;
  ::google::protobuf::int32 tradvol() const;
  void set_tradvol(::google::protobuf::int32 value);

  // int32 field1 = 41;
  void clear_field1();
  static const int kField1FieldNumber = 41;
  ::google::protobuf::int32 field1() const;
  void set_field1(::google::protobuf::int32 value);

  // double field3 = 43;
  void clear_field3();
  static const int kField3FieldNumber = 43;
  double field3() const;
  void set_field3(double value);

  // double field4 = 44;
  void clear_field4();
  static const int kField4FieldNumber = 44;
  double field4() const;
  void set_field4(double value);

  // int32 field2 = 42;
  void clear_field2();
  static const int kField2FieldNumber = 42;
  ::google::protobuf::int32 field2() const;
  void set_field2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:depthmarketdata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > bp_;
  mutable int _bp_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > bv_;
  mutable int _bv_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > sp_;
  mutable int _sp_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > sv_;
  mutable int _sv_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr securitycode_;
  ::google::protobuf::internal::ArenaStringPtr securityname_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr field5_;
  ::google::protobuf::internal::ArenaStringPtr field6_;
  ::google::protobuf::int64 ei_;
  double openprice_;
  double precloseprice_;
  double lastprice_;
  double highprice_;
  double lowprice_;
  double bidprice_;
  double askprice_;
  double turnover_;
  ::google::protobuf::uint32 volume_;
  ::google::protobuf::uint32 updtime_;
  double turnoverrate_;
  double avpri_;
  double sa_;
  double limitup_;
  double limitdown_;
  double cirstock_;
  double totstock_;
  double cirval_;
  double totval_;
  double nav_;
  double ratio_;
  double committee_;
  double ped_;
  double pes_;
  double wp_;
  double np_;
  double z_;
  double d_;
  double p_;
  ::google::protobuf::int32 tradvol_;
  ::google::protobuf::int32 field1_;
  double field3_;
  double field4_;
  ::google::protobuf::int32 field2_;
  mutable int _cached_size_;
  friend struct protobuf_depthmarketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class clearsignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:clearsignal) */ {
 public:
  clearsignal();
  virtual ~clearsignal();

  clearsignal(const clearsignal& from);

  inline clearsignal& operator=(const clearsignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  clearsignal(clearsignal&& from) noexcept
    : clearsignal() {
    *this = ::std::move(from);
  }

  inline clearsignal& operator=(clearsignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const clearsignal& default_instance();

  static inline const clearsignal* internal_default_instance() {
    return reinterpret_cast<const clearsignal*>(
               &_clearsignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(clearsignal* other);
  friend void swap(clearsignal& a, clearsignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline clearsignal* New() const PROTOBUF_FINAL { return New(NULL); }

  clearsignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const clearsignal& from);
  void MergeFrom(const clearsignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(clearsignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tradingday = 1;
  void clear_tradingday();
  static const int kTradingdayFieldNumber = 1;
  const ::std::string& tradingday() const;
  void set_tradingday(const ::std::string& value);
  #if LANG_CXX11
  void set_tradingday(::std::string&& value);
  #endif
  void set_tradingday(const char* value);
  void set_tradingday(const char* value, size_t size);
  ::std::string* mutable_tradingday();
  ::std::string* release_tradingday();
  void set_allocated_tradingday(::std::string* tradingday);

  // uint32 update_time = 2;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  ::google::protobuf::uint32 update_time() const;
  void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:clearsignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tradingday_;
  ::google::protobuf::uint32 update_time_;
  mutable int _cached_size_;
  friend struct protobuf_depthmarketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class heartbeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:heartbeat) */ {
 public:
  heartbeat();
  virtual ~heartbeat();

  heartbeat(const heartbeat& from);

  inline heartbeat& operator=(const heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  heartbeat(heartbeat&& from) noexcept
    : heartbeat() {
    *this = ::std::move(from);
  }

  inline heartbeat& operator=(heartbeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const heartbeat& default_instance();

  static inline const heartbeat* internal_default_instance() {
    return reinterpret_cast<const heartbeat*>(
               &_heartbeat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(heartbeat* other);
  friend void swap(heartbeat& a, heartbeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline heartbeat* New() const PROTOBUF_FINAL { return New(NULL); }

  heartbeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const heartbeat& from);
  void MergeFrom(const heartbeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(heartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 update_time = 1;
  void clear_update_time();
  static const int kUpdateTimeFieldNumber = 1;
  ::google::protobuf::uint32 update_time() const;
  void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:heartbeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 update_time_;
  mutable int _cached_size_;
  friend struct protobuf_depthmarketdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class protomessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protomessage) */ {
 public:
  protomessage();
  virtual ~protomessage();

  protomessage(const protomessage& from);

  inline protomessage& operator=(const protomessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  protomessage(protomessage&& from) noexcept
    : protomessage() {
    *this = ::std::move(from);
  }

  inline protomessage& operator=(protomessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const protomessage& default_instance();

  enum WhichMessageCase {
    kMarketData = 1,
    kClearSignal = 2,
    kHeartBeat = 3,
    WHICH_MESSAGE_NOT_SET = 0,
  };

  static inline const protomessage* internal_default_instance() {
    return reinterpret_cast<const protomessage*>(
               &_protomessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(protomessage* other);
  friend void swap(protomessage& a, protomessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline protomessage* New() const PROTOBUF_FINAL { return New(NULL); }

  protomessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const protomessage& from);
  void MergeFrom(const protomessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(protomessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .depthmarketdata market_data = 1;
  bool has_market_data() const;
  void clear_market_data();
  static const int kMarketDataFieldNumber = 1;
  const ::depthmarketdata& market_data() const;
  ::depthmarketdata* mutable_market_data();
  ::depthmarketdata* release_market_data();
  void set_allocated_market_data(::depthmarketdata* market_data);

  // .clearsignal clear_signal = 2;
  bool has_clear_signal() const;
  void clear_clear_signal();
  static const int kClearSignalFieldNumber = 2;
  const ::clearsignal& clear_signal() const;
  ::clearsignal* mutable_clear_signal();
  ::clearsignal* release_clear_signal();
  void set_allocated_clear_signal(::clearsignal* clear_signal);

  // .heartbeat heart_beat = 3;
  bool has_heart_beat() const;
  void clear_heart_beat();
  static const int kHeartBeatFieldNumber = 3;
  const ::heartbeat& heart_beat() const;
  ::heartbeat* mutable_heart_beat();
  ::heartbeat* release_heart_beat();
  void set_allocated_heart_beat(::heartbeat* heart_beat);

  WhichMessageCase which_message_case() const;
  // @@protoc_insertion_point(class_scope:protomessage)
 private:
  void set_has_market_data();
  void set_has_clear_signal();
  void set_has_heart_beat();

  inline bool has_which_message() const;
  void clear_which_message();
  inline void clear_has_which_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union WhichMessageUnion {
    WhichMessageUnion() {}
    ::depthmarketdata* market_data_;
    ::clearsignal* clear_signal_;
    ::heartbeat* heart_beat_;
  } which_message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_depthmarketdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// depthmarketdata

// int64 Ei = 1;
inline void depthmarketdata::clear_ei() {
  ei_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 depthmarketdata::ei() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Ei)
  return ei_;
}
inline void depthmarketdata::set_ei(::google::protobuf::int64 value) {
  
  ei_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Ei)
}

// string SecurityCode = 2;
inline void depthmarketdata::clear_securitycode() {
  securitycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& depthmarketdata::securitycode() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SecurityCode)
  return securitycode_.GetNoArena();
}
inline void depthmarketdata::set_securitycode(const ::std::string& value) {
  
  securitycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SecurityCode)
}
#if LANG_CXX11
inline void depthmarketdata::set_securitycode(::std::string&& value) {
  
  securitycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.SecurityCode)
}
#endif
inline void depthmarketdata::set_securitycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  securitycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.SecurityCode)
}
inline void depthmarketdata::set_securitycode(const char* value, size_t size) {
  
  securitycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.SecurityCode)
}
inline ::std::string* depthmarketdata::mutable_securitycode() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.SecurityCode)
  return securitycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthmarketdata::release_securitycode() {
  // @@protoc_insertion_point(field_release:depthmarketdata.SecurityCode)
  
  return securitycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthmarketdata::set_allocated_securitycode(::std::string* securitycode) {
  if (securitycode != NULL) {
    
  } else {
    
  }
  securitycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securitycode);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.SecurityCode)
}

// string SecurityName = 3;
inline void depthmarketdata::clear_securityname() {
  securityname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& depthmarketdata::securityname() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SecurityName)
  return securityname_.GetNoArena();
}
inline void depthmarketdata::set_securityname(const ::std::string& value) {
  
  securityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SecurityName)
}
#if LANG_CXX11
inline void depthmarketdata::set_securityname(::std::string&& value) {
  
  securityname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.SecurityName)
}
#endif
inline void depthmarketdata::set_securityname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  securityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.SecurityName)
}
inline void depthmarketdata::set_securityname(const char* value, size_t size) {
  
  securityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.SecurityName)
}
inline ::std::string* depthmarketdata::mutable_securityname() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.SecurityName)
  return securityname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthmarketdata::release_securityname() {
  // @@protoc_insertion_point(field_release:depthmarketdata.SecurityName)
  
  return securityname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthmarketdata::set_allocated_securityname(::std::string* securityname) {
  if (securityname != NULL) {
    
  } else {
    
  }
  securityname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), securityname);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.SecurityName)
}

// double OpenPrice = 4;
inline void depthmarketdata::clear_openprice() {
  openprice_ = 0;
}
inline double depthmarketdata::openprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.OpenPrice)
  return openprice_;
}
inline void depthmarketdata::set_openprice(double value) {
  
  openprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.OpenPrice)
}

// double PreClosePrice = 5;
inline void depthmarketdata::clear_precloseprice() {
  precloseprice_ = 0;
}
inline double depthmarketdata::precloseprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.PreClosePrice)
  return precloseprice_;
}
inline void depthmarketdata::set_precloseprice(double value) {
  
  precloseprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.PreClosePrice)
}

// double LastPrice = 6;
inline void depthmarketdata::clear_lastprice() {
  lastprice_ = 0;
}
inline double depthmarketdata::lastprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LastPrice)
  return lastprice_;
}
inline void depthmarketdata::set_lastprice(double value) {
  
  lastprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LastPrice)
}

// double HighPrice = 7;
inline void depthmarketdata::clear_highprice() {
  highprice_ = 0;
}
inline double depthmarketdata::highprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.HighPrice)
  return highprice_;
}
inline void depthmarketdata::set_highprice(double value) {
  
  highprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.HighPrice)
}

// double LowPrice = 8;
inline void depthmarketdata::clear_lowprice() {
  lowprice_ = 0;
}
inline double depthmarketdata::lowprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LowPrice)
  return lowprice_;
}
inline void depthmarketdata::set_lowprice(double value) {
  
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LowPrice)
}

// double BidPrice = 9;
inline void depthmarketdata::clear_bidprice() {
  bidprice_ = 0;
}
inline double depthmarketdata::bidprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.BidPrice)
  return bidprice_;
}
inline void depthmarketdata::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.BidPrice)
}

// double AskPrice = 10;
inline void depthmarketdata::clear_askprice() {
  askprice_ = 0;
}
inline double depthmarketdata::askprice() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.AskPrice)
  return askprice_;
}
inline void depthmarketdata::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.AskPrice)
}

// uint32 Volume = 11;
inline void depthmarketdata::clear_volume() {
  volume_ = 0u;
}
inline ::google::protobuf::uint32 depthmarketdata::volume() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Volume)
  return volume_;
}
inline void depthmarketdata::set_volume(::google::protobuf::uint32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Volume)
}

// double Turnover = 12;
inline void depthmarketdata::clear_turnover() {
  turnover_ = 0;
}
inline double depthmarketdata::turnover() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Turnover)
  return turnover_;
}
inline void depthmarketdata::set_turnover(double value) {
  
  turnover_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Turnover)
}

// repeated double BP = 13;
inline int depthmarketdata::bp_size() const {
  return bp_.size();
}
inline void depthmarketdata::clear_bp() {
  bp_.Clear();
}
inline double depthmarketdata::bp(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.BP)
  return bp_.Get(index);
}
inline void depthmarketdata::set_bp(int index, double value) {
  bp_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.BP)
}
inline void depthmarketdata::add_bp(double value) {
  bp_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.BP)
}
inline const ::google::protobuf::RepeatedField< double >&
depthmarketdata::bp() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.BP)
  return bp_;
}
inline ::google::protobuf::RepeatedField< double >*
depthmarketdata::mutable_bp() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.BP)
  return &bp_;
}

// repeated uint32 BV = 14;
inline int depthmarketdata::bv_size() const {
  return bv_.size();
}
inline void depthmarketdata::clear_bv() {
  bv_.Clear();
}
inline ::google::protobuf::uint32 depthmarketdata::bv(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.BV)
  return bv_.Get(index);
}
inline void depthmarketdata::set_bv(int index, ::google::protobuf::uint32 value) {
  bv_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.BV)
}
inline void depthmarketdata::add_bv(::google::protobuf::uint32 value) {
  bv_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.BV)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
depthmarketdata::bv() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.BV)
  return bv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
depthmarketdata::mutable_bv() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.BV)
  return &bv_;
}

// repeated double SP = 15;
inline int depthmarketdata::sp_size() const {
  return sp_.size();
}
inline void depthmarketdata::clear_sp() {
  sp_.Clear();
}
inline double depthmarketdata::sp(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SP)
  return sp_.Get(index);
}
inline void depthmarketdata::set_sp(int index, double value) {
  sp_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SP)
}
inline void depthmarketdata::add_sp(double value) {
  sp_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.SP)
}
inline const ::google::protobuf::RepeatedField< double >&
depthmarketdata::sp() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.SP)
  return sp_;
}
inline ::google::protobuf::RepeatedField< double >*
depthmarketdata::mutable_sp() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.SP)
  return &sp_;
}

// repeated uint32 SV = 16;
inline int depthmarketdata::sv_size() const {
  return sv_.size();
}
inline void depthmarketdata::clear_sv() {
  sv_.Clear();
}
inline ::google::protobuf::uint32 depthmarketdata::sv(int index) const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SV)
  return sv_.Get(index);
}
inline void depthmarketdata::set_sv(int index, ::google::protobuf::uint32 value) {
  sv_.Set(index, value);
  // @@protoc_insertion_point(field_set:depthmarketdata.SV)
}
inline void depthmarketdata::add_sv(::google::protobuf::uint32 value) {
  sv_.Add(value);
  // @@protoc_insertion_point(field_add:depthmarketdata.SV)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
depthmarketdata::sv() const {
  // @@protoc_insertion_point(field_list:depthmarketdata.SV)
  return sv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
depthmarketdata::mutable_sv() {
  // @@protoc_insertion_point(field_mutable_list:depthmarketdata.SV)
  return &sv_;
}

// string Date = 17;
inline void depthmarketdata::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& depthmarketdata::date() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Date)
  return date_.GetNoArena();
}
inline void depthmarketdata::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.Date)
}
#if LANG_CXX11
inline void depthmarketdata::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.Date)
}
#endif
inline void depthmarketdata::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.Date)
}
inline void depthmarketdata::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.Date)
}
inline ::std::string* depthmarketdata::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.Date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthmarketdata::release_date() {
  // @@protoc_insertion_point(field_release:depthmarketdata.Date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthmarketdata::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.Date)
}

// string Time = 18;
inline void depthmarketdata::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& depthmarketdata::time() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Time)
  return time_.GetNoArena();
}
inline void depthmarketdata::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.Time)
}
#if LANG_CXX11
inline void depthmarketdata::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.Time)
}
#endif
inline void depthmarketdata::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.Time)
}
inline void depthmarketdata::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.Time)
}
inline ::std::string* depthmarketdata::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.Time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthmarketdata::release_time() {
  // @@protoc_insertion_point(field_release:depthmarketdata.Time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthmarketdata::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.Time)
}

// string Status = 19;
inline void depthmarketdata::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& depthmarketdata::status() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Status)
  return status_.GetNoArena();
}
inline void depthmarketdata::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.Status)
}
#if LANG_CXX11
inline void depthmarketdata::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.Status)
}
#endif
inline void depthmarketdata::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.Status)
}
inline void depthmarketdata::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.Status)
}
inline ::std::string* depthmarketdata::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthmarketdata::release_status() {
  // @@protoc_insertion_point(field_release:depthmarketdata.Status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthmarketdata::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.Status)
}

// uint32 UpdTime = 20;
inline void depthmarketdata::clear_updtime() {
  updtime_ = 0u;
}
inline ::google::protobuf::uint32 depthmarketdata::updtime() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.UpdTime)
  return updtime_;
}
inline void depthmarketdata::set_updtime(::google::protobuf::uint32 value) {
  
  updtime_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.UpdTime)
}

// double TurnoverRate = 21;
inline void depthmarketdata::clear_turnoverrate() {
  turnoverrate_ = 0;
}
inline double depthmarketdata::turnoverrate() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TurnoverRate)
  return turnoverrate_;
}
inline void depthmarketdata::set_turnoverrate(double value) {
  
  turnoverrate_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TurnoverRate)
}

// double AvPri = 22;
inline void depthmarketdata::clear_avpri() {
  avpri_ = 0;
}
inline double depthmarketdata::avpri() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.AvPri)
  return avpri_;
}
inline void depthmarketdata::set_avpri(double value) {
  
  avpri_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.AvPri)
}

// double SA = 23;
inline void depthmarketdata::clear_sa() {
  sa_ = 0;
}
inline double depthmarketdata::sa() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.SA)
  return sa_;
}
inline void depthmarketdata::set_sa(double value) {
  
  sa_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.SA)
}

// double LimitUp = 24;
inline void depthmarketdata::clear_limitup() {
  limitup_ = 0;
}
inline double depthmarketdata::limitup() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LimitUp)
  return limitup_;
}
inline void depthmarketdata::set_limitup(double value) {
  
  limitup_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LimitUp)
}

// double LimitDown = 25;
inline void depthmarketdata::clear_limitdown() {
  limitdown_ = 0;
}
inline double depthmarketdata::limitdown() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.LimitDown)
  return limitdown_;
}
inline void depthmarketdata::set_limitdown(double value) {
  
  limitdown_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.LimitDown)
}

// double CirStock = 26;
inline void depthmarketdata::clear_cirstock() {
  cirstock_ = 0;
}
inline double depthmarketdata::cirstock() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.CirStock)
  return cirstock_;
}
inline void depthmarketdata::set_cirstock(double value) {
  
  cirstock_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.CirStock)
}

// double TotStock = 27;
inline void depthmarketdata::clear_totstock() {
  totstock_ = 0;
}
inline double depthmarketdata::totstock() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TotStock)
  return totstock_;
}
inline void depthmarketdata::set_totstock(double value) {
  
  totstock_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TotStock)
}

// double CirVal = 28;
inline void depthmarketdata::clear_cirval() {
  cirval_ = 0;
}
inline double depthmarketdata::cirval() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.CirVal)
  return cirval_;
}
inline void depthmarketdata::set_cirval(double value) {
  
  cirval_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.CirVal)
}

// double TotVal = 29;
inline void depthmarketdata::clear_totval() {
  totval_ = 0;
}
inline double depthmarketdata::totval() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TotVal)
  return totval_;
}
inline void depthmarketdata::set_totval(double value) {
  
  totval_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TotVal)
}

// double NAV = 30;
inline void depthmarketdata::clear_nav() {
  nav_ = 0;
}
inline double depthmarketdata::nav() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.NAV)
  return nav_;
}
inline void depthmarketdata::set_nav(double value) {
  
  nav_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.NAV)
}

// double Ratio = 31;
inline void depthmarketdata::clear_ratio() {
  ratio_ = 0;
}
inline double depthmarketdata::ratio() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Ratio)
  return ratio_;
}
inline void depthmarketdata::set_ratio(double value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Ratio)
}

// double Committee = 32;
inline void depthmarketdata::clear_committee() {
  committee_ = 0;
}
inline double depthmarketdata::committee() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Committee)
  return committee_;
}
inline void depthmarketdata::set_committee(double value) {
  
  committee_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Committee)
}

// double PED = 33;
inline void depthmarketdata::clear_ped() {
  ped_ = 0;
}
inline double depthmarketdata::ped() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.PED)
  return ped_;
}
inline void depthmarketdata::set_ped(double value) {
  
  ped_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.PED)
}

// double PES = 34;
inline void depthmarketdata::clear_pes() {
  pes_ = 0;
}
inline double depthmarketdata::pes() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.PES)
  return pes_;
}
inline void depthmarketdata::set_pes(double value) {
  
  pes_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.PES)
}

// double WP = 35;
inline void depthmarketdata::clear_wp() {
  wp_ = 0;
}
inline double depthmarketdata::wp() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.WP)
  return wp_;
}
inline void depthmarketdata::set_wp(double value) {
  
  wp_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.WP)
}

// double NP = 36;
inline void depthmarketdata::clear_np() {
  np_ = 0;
}
inline double depthmarketdata::np() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.NP)
  return np_;
}
inline void depthmarketdata::set_np(double value) {
  
  np_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.NP)
}

// double Z = 37;
inline void depthmarketdata::clear_z() {
  z_ = 0;
}
inline double depthmarketdata::z() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.Z)
  return z_;
}
inline void depthmarketdata::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.Z)
}

// double D = 38;
inline void depthmarketdata::clear_d() {
  d_ = 0;
}
inline double depthmarketdata::d() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.D)
  return d_;
}
inline void depthmarketdata::set_d(double value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.D)
}

// double P = 39;
inline void depthmarketdata::clear_p() {
  p_ = 0;
}
inline double depthmarketdata::p() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.P)
  return p_;
}
inline void depthmarketdata::set_p(double value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.P)
}

// int32 TradVol = 40;
inline void depthmarketdata::clear_tradvol() {
  tradvol_ = 0;
}
inline ::google::protobuf::int32 depthmarketdata::tradvol() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.TradVol)
  return tradvol_;
}
inline void depthmarketdata::set_tradvol(::google::protobuf::int32 value) {
  
  tradvol_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.TradVol)
}

// int32 field1 = 41;
inline void depthmarketdata::clear_field1() {
  field1_ = 0;
}
inline ::google::protobuf::int32 depthmarketdata::field1() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field1)
  return field1_;
}
inline void depthmarketdata::set_field1(::google::protobuf::int32 value) {
  
  field1_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field1)
}

// int32 field2 = 42;
inline void depthmarketdata::clear_field2() {
  field2_ = 0;
}
inline ::google::protobuf::int32 depthmarketdata::field2() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field2)
  return field2_;
}
inline void depthmarketdata::set_field2(::google::protobuf::int32 value) {
  
  field2_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field2)
}

// double field3 = 43;
inline void depthmarketdata::clear_field3() {
  field3_ = 0;
}
inline double depthmarketdata::field3() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field3)
  return field3_;
}
inline void depthmarketdata::set_field3(double value) {
  
  field3_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field3)
}

// double field4 = 44;
inline void depthmarketdata::clear_field4() {
  field4_ = 0;
}
inline double depthmarketdata::field4() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field4)
  return field4_;
}
inline void depthmarketdata::set_field4(double value) {
  
  field4_ = value;
  // @@protoc_insertion_point(field_set:depthmarketdata.field4)
}

// string field5 = 55;
inline void depthmarketdata::clear_field5() {
  field5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& depthmarketdata::field5() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field5)
  return field5_.GetNoArena();
}
inline void depthmarketdata::set_field5(const ::std::string& value) {
  
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.field5)
}
#if LANG_CXX11
inline void depthmarketdata::set_field5(::std::string&& value) {
  
  field5_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.field5)
}
#endif
inline void depthmarketdata::set_field5(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.field5)
}
inline void depthmarketdata::set_field5(const char* value, size_t size) {
  
  field5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.field5)
}
inline ::std::string* depthmarketdata::mutable_field5() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.field5)
  return field5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthmarketdata::release_field5() {
  // @@protoc_insertion_point(field_release:depthmarketdata.field5)
  
  return field5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthmarketdata::set_allocated_field5(::std::string* field5) {
  if (field5 != NULL) {
    
  } else {
    
  }
  field5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field5);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.field5)
}

// string field6 = 56;
inline void depthmarketdata::clear_field6() {
  field6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& depthmarketdata::field6() const {
  // @@protoc_insertion_point(field_get:depthmarketdata.field6)
  return field6_.GetNoArena();
}
inline void depthmarketdata::set_field6(const ::std::string& value) {
  
  field6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:depthmarketdata.field6)
}
#if LANG_CXX11
inline void depthmarketdata::set_field6(::std::string&& value) {
  
  field6_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:depthmarketdata.field6)
}
#endif
inline void depthmarketdata::set_field6(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:depthmarketdata.field6)
}
inline void depthmarketdata::set_field6(const char* value, size_t size) {
  
  field6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:depthmarketdata.field6)
}
inline ::std::string* depthmarketdata::mutable_field6() {
  
  // @@protoc_insertion_point(field_mutable:depthmarketdata.field6)
  return field6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthmarketdata::release_field6() {
  // @@protoc_insertion_point(field_release:depthmarketdata.field6)
  
  return field6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthmarketdata::set_allocated_field6(::std::string* field6) {
  if (field6 != NULL) {
    
  } else {
    
  }
  field6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field6);
  // @@protoc_insertion_point(field_set_allocated:depthmarketdata.field6)
}

// -------------------------------------------------------------------

// clearsignal

// string tradingday = 1;
inline void clearsignal::clear_tradingday() {
  tradingday_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& clearsignal::tradingday() const {
  // @@protoc_insertion_point(field_get:clearsignal.tradingday)
  return tradingday_.GetNoArena();
}
inline void clearsignal::set_tradingday(const ::std::string& value) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:clearsignal.tradingday)
}
#if LANG_CXX11
inline void clearsignal::set_tradingday(::std::string&& value) {
  
  tradingday_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:clearsignal.tradingday)
}
#endif
inline void clearsignal::set_tradingday(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:clearsignal.tradingday)
}
inline void clearsignal::set_tradingday(const char* value, size_t size) {
  
  tradingday_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:clearsignal.tradingday)
}
inline ::std::string* clearsignal::mutable_tradingday() {
  
  // @@protoc_insertion_point(field_mutable:clearsignal.tradingday)
  return tradingday_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* clearsignal::release_tradingday() {
  // @@protoc_insertion_point(field_release:clearsignal.tradingday)
  
  return tradingday_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void clearsignal::set_allocated_tradingday(::std::string* tradingday) {
  if (tradingday != NULL) {
    
  } else {
    
  }
  tradingday_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradingday);
  // @@protoc_insertion_point(field_set_allocated:clearsignal.tradingday)
}

// uint32 update_time = 2;
inline void clearsignal::clear_update_time() {
  update_time_ = 0u;
}
inline ::google::protobuf::uint32 clearsignal::update_time() const {
  // @@protoc_insertion_point(field_get:clearsignal.update_time)
  return update_time_;
}
inline void clearsignal::set_update_time(::google::protobuf::uint32 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:clearsignal.update_time)
}

// -------------------------------------------------------------------

// heartbeat

// uint32 update_time = 1;
inline void heartbeat::clear_update_time() {
  update_time_ = 0u;
}
inline ::google::protobuf::uint32 heartbeat::update_time() const {
  // @@protoc_insertion_point(field_get:heartbeat.update_time)
  return update_time_;
}
inline void heartbeat::set_update_time(::google::protobuf::uint32 value) {
  
  update_time_ = value;
  // @@protoc_insertion_point(field_set:heartbeat.update_time)
}

// -------------------------------------------------------------------

// protomessage

// .depthmarketdata market_data = 1;
inline bool protomessage::has_market_data() const {
  return which_message_case() == kMarketData;
}
inline void protomessage::set_has_market_data() {
  _oneof_case_[0] = kMarketData;
}
inline void protomessage::clear_market_data() {
  if (has_market_data()) {
    delete which_message_.market_data_;
    clear_has_which_message();
  }
}
inline  const ::depthmarketdata& protomessage::market_data() const {
  // @@protoc_insertion_point(field_get:protomessage.market_data)
  return has_market_data()
      ? *which_message_.market_data_
      : ::depthmarketdata::default_instance();
}
inline ::depthmarketdata* protomessage::mutable_market_data() {
  if (!has_market_data()) {
    clear_which_message();
    set_has_market_data();
    which_message_.market_data_ = new ::depthmarketdata;
  }
  // @@protoc_insertion_point(field_mutable:protomessage.market_data)
  return which_message_.market_data_;
}
inline ::depthmarketdata* protomessage::release_market_data() {
  // @@protoc_insertion_point(field_release:protomessage.market_data)
  if (has_market_data()) {
    clear_has_which_message();
    ::depthmarketdata* temp = which_message_.market_data_;
    which_message_.market_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void protomessage::set_allocated_market_data(::depthmarketdata* market_data) {
  clear_which_message();
  if (market_data) {
    set_has_market_data();
    which_message_.market_data_ = market_data;
  }
  // @@protoc_insertion_point(field_set_allocated:protomessage.market_data)
}

// .clearsignal clear_signal = 2;
inline bool protomessage::has_clear_signal() const {
  return which_message_case() == kClearSignal;
}
inline void protomessage::set_has_clear_signal() {
  _oneof_case_[0] = kClearSignal;
}
inline void protomessage::clear_clear_signal() {
  if (has_clear_signal()) {
    delete which_message_.clear_signal_;
    clear_has_which_message();
  }
}
inline  const ::clearsignal& protomessage::clear_signal() const {
  // @@protoc_insertion_point(field_get:protomessage.clear_signal)
  return has_clear_signal()
      ? *which_message_.clear_signal_
      : ::clearsignal::default_instance();
}
inline ::clearsignal* protomessage::mutable_clear_signal() {
  if (!has_clear_signal()) {
    clear_which_message();
    set_has_clear_signal();
    which_message_.clear_signal_ = new ::clearsignal;
  }
  // @@protoc_insertion_point(field_mutable:protomessage.clear_signal)
  return which_message_.clear_signal_;
}
inline ::clearsignal* protomessage::release_clear_signal() {
  // @@protoc_insertion_point(field_release:protomessage.clear_signal)
  if (has_clear_signal()) {
    clear_has_which_message();
    ::clearsignal* temp = which_message_.clear_signal_;
    which_message_.clear_signal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void protomessage::set_allocated_clear_signal(::clearsignal* clear_signal) {
  clear_which_message();
  if (clear_signal) {
    set_has_clear_signal();
    which_message_.clear_signal_ = clear_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:protomessage.clear_signal)
}

// .heartbeat heart_beat = 3;
inline bool protomessage::has_heart_beat() const {
  return which_message_case() == kHeartBeat;
}
inline void protomessage::set_has_heart_beat() {
  _oneof_case_[0] = kHeartBeat;
}
inline void protomessage::clear_heart_beat() {
  if (has_heart_beat()) {
    delete which_message_.heart_beat_;
    clear_has_which_message();
  }
}
inline  const ::heartbeat& protomessage::heart_beat() const {
  // @@protoc_insertion_point(field_get:protomessage.heart_beat)
  return has_heart_beat()
      ? *which_message_.heart_beat_
      : ::heartbeat::default_instance();
}
inline ::heartbeat* protomessage::mutable_heart_beat() {
  if (!has_heart_beat()) {
    clear_which_message();
    set_has_heart_beat();
    which_message_.heart_beat_ = new ::heartbeat;
  }
  // @@protoc_insertion_point(field_mutable:protomessage.heart_beat)
  return which_message_.heart_beat_;
}
inline ::heartbeat* protomessage::release_heart_beat() {
  // @@protoc_insertion_point(field_release:protomessage.heart_beat)
  if (has_heart_beat()) {
    clear_has_which_message();
    ::heartbeat* temp = which_message_.heart_beat_;
    which_message_.heart_beat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void protomessage::set_allocated_heart_beat(::heartbeat* heart_beat) {
  clear_which_message();
  if (heart_beat) {
    set_has_heart_beat();
    which_message_.heart_beat_ = heart_beat;
  }
  // @@protoc_insertion_point(field_set_allocated:protomessage.heart_beat)
}

inline bool protomessage::has_which_message() const {
  return which_message_case() != WHICH_MESSAGE_NOT_SET;
}
inline void protomessage::clear_has_which_message() {
  _oneof_case_[0] = WHICH_MESSAGE_NOT_SET;
}
inline protomessage::WhichMessageCase protomessage::which_message_case() const {
  return protomessage::WhichMessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_depthmarketdata_2eproto__INCLUDED
